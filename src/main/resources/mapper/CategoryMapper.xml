<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shoppingmall.demo.mapper.CategoryMapper">
	<resultMap id="CategoryMap" type="Category">
		<id property="cateId" column="category_id"/>
		<result property="cateName" column="category_name"/>
		<result property="parentId" column="parent_id"/>
	</resultMap>
	
	<!-- 카테고리 등록 -->
	<insert id="insertCategory" parameterType="Category">
		INSERT INTO category (
			category_id,
			category_name,
			parent_id
		) VALUE (
			#{cateId},
			#{cateName},
			<!-- null 허용을 위한 INTEGER 사용 -->
			#{parentId, jdbcType=INTEGER}
		)
	</insert>
	
	<!-- 카테고리 목록 조회 -->
	<select id="selectCategoryList" resultMap="CategoryMap">
		SELECT	category_id, category_name, parent_id
		FROM	category
		ORDER BY parent_id ASC, category_id ASC
	</select>
	
	<!-- 특정 카테고리 조회 -->
	<select id="selectCategoryById" parameterType="int" resultMap="CategoryMap">
		SELECT	category_id, category_name, parent_id
		FROM	category
		WHERE	category_id = #{cateId}
	</select>
	
	<!-- 하위 카테고리 조회 -->
	<select id="selectSubCategories" parameterType="map" resultMap="CategoryMap">
		SELECT category_id, category_name, parent_id
	    FROM category
	    WHERE parent_id = #{parentId}
	    <if test="excludeId != null">
	        AND category_id != #{excludeId} <!-- 현재 편집 중인 카테고리 제외 -->
	    </if>
	    ORDER BY category_id ASC
	</select>
	
	<!-- 카테고리 삭제 -->
	<delete id="deleteCategory" parameterType="int">
		DELETE FROM category
		WHERE	category_id = #{cateId}
	</delete>
	
	<!-- 카테고리 수정 -->
	<update id="updateCategory" parameterType="Category">
		UPDATE	category
		SET		category_name = #{cateName},
				parent_id = #{parentId, jdbcType=INTEGER}
		WHERE	category_id = #{cateId}
	</update>
	
	<!-- 계층형 카테고리 목록조회 -->
	<select id="selectTierCategory" resultMap="CategoryMap">
		WITH RECURSIVE CategoryTier AS (
			SELECT	category_id, category_name, parent_id, 0 as level,
					<!-- 카테고리 이름을 경로로 바꾸기위한 CAST -->
					CAST(category_name AS CHAR(1000)) as path 
			FROM	category
			WHERE	parent_id IS NULL
			
			UNION ALL
			
			SELECT	c.category_id, c.category_name, c.parent_id, ct.level + 1,
					CONCAT(ct.path, '>', c.category_name)
			FROM	category c
			INNER JOIN
					CategoryTier AS ct ON c.parent_id = ct.category_id
		)
		SELECT 	*
		FROM	CategoryTier
		ORDER BY path;
	</select>
	
	<!-- 특정 카테고리의 모든 하위 카테고리 조회 -->
	<select id="selectAllSubCategories" parameterType="int" resultMap="CategoryMap">
		WITH RECURSIVE SubCategories AS (
			SELECT	category_id, category_name, parent_id
			FROM	category
			WHERE	parent_id = #{cateId}
			
			UNION ALL
			
			SELECT	c.category_id, c.category_name, c.parent_id
			FROM	category c
			INNER JOIN	SubCategories s ON c.parent_id = s.category_id
		)
		SELECT	*
		FROM	SubCategories
		ORDER BY category_id;
	</select>
	
	<!-- 카테고리의 전체 경로 조회 -->
	<select id="getCategoryPath" parameterType="int" resultMap="CategoryMap">
		WITH RECURSIVE CategoryPath AS (
			-- 현재 카테고리
			SELECT category_id, category_name, parent_id, 1 as level
			FROM category
			WHERE category_id = #{cateId}
			
			UNION ALL
			
			-- 상위 카테고리들
			SELECT c.category_id, c.category_name, c.parent_id, cp.level + 1
			FROM category c
			INNER JOIN CategoryPath cp ON c.category_id = cp.parent_id
		)
		SELECT *
		FROM CategoryPath
		ORDER BY level DESC;
	</select>
	
</mapper>