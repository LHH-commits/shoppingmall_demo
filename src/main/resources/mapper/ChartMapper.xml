<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shoppingmall.demo.mapper.ChartMapper">

    <resultMap id="ChartMap" type="Chart">
        <result property="orderDate" column="orderDate"/>
        <result property="orderCount" column="orderCount"/>
        <result property="totalSales" column="totalSales"/>
        <result property="productName" column="p_name"/>
        <result property="productPrice" column="p_price"/>
        <result property="categoryPath" column="category_path"/>
        <result property="totalQuantity" column="totalQuantity"/>
        <result property="avgRating" column="avgRating"/>
    </resultMap>

    <!-- 기간별 주문 건수 및 매출 통계 -->
    <select id="getSalesStatsByPeriod" parameterType="map" resultMap="ChartMap">
        SELECT 
            DATE(o.o_datetime) as orderDate,
            COUNT(DISTINCT o.o_id) as orderCount,
            SUM(o.total_price) as totalSales
        FROM 
            orders o
        WHERE 
            o.o_datetime BETWEEN #{startDate} AND #{endDate}
        GROUP BY 
            DATE(o.o_datetime)
        ORDER BY 
            orderDate
    </select>

    <!-- 카테고리별 판매 통계 (계층형 구조) -->
    <select id="getSalesStatsByCategory" parameterType="map" resultType="map">
        WITH RECURSIVE CategoryHierarchy AS (
            SELECT 
                c.category_id,
                c.category_name,
                c.parent_id,
                CAST(c.category_name AS CHAR(1000)) as category_path
            FROM 
                category c
            WHERE 
                c.category_id = #{categoryId}
            
            UNION ALL
            
            SELECT 
                c.category_id,
                c.category_name,
                c.parent_id,
                CONCAT(ch.category_path, '>', c.category_name)
            FROM 
                category c
            INNER JOIN 
                CategoryHierarchy ch ON c.parent_id = ch.category_id
        )
        SELECT 
            p.p_id,
            p.p_name,
            p.p_price,
            ch.category_path,
            SUM(od.od_count) as totalQuantity,
            SUM(od.od_price) as totalAmount,
            COALESCE(AVG(r.r_rating), 0) as avgRating
        FROM 
            orders o
            JOIN order_detail od ON o.o_id = od.o_id
            JOIN product p ON od.p_id = p.p_id
            JOIN category c ON p.category_id = c.category_id
            JOIN CategoryHierarchy ch ON c.category_id = ch.category_id
            LEFT JOIN review r ON p.p_id = r.p_id
        WHERE 
            o.o_datetime BETWEEN #{startDate} AND #{endDate}
            <if test="categoryId != null">
                AND c.category_id IN (
                    SELECT category_id FROM CategoryHierarchy
                )
            </if>
        GROUP BY 
            p.p_id, ch.category_path
        ORDER BY 
            totalAmount DESC
    </select>

    <!-- 상품별 판매 순위 -->
    <select id="getTopSellingProducts" parameterType="map" resultType="map">
        SELECT 
            p.p_name,
            SUM(od.od_count) as totalQuantity,
            SUM(od.od_price) as totalAmount
        FROM 
            orders o
            JOIN order_detail od ON o.o_id = od.o_id
            JOIN product p ON od.p_id = p.p_id
        WHERE 
            o.o_datetime BETWEEN #{startDate} AND #{endDate}
        GROUP BY 
            p.p_id
        ORDER BY 
            totalAmount DESC
        LIMIT 10
    </select>

    <!-- 일별 평균 주문금액 -->
    <select id="getAverageOrderAmount" parameterType="map" resultType="map">
        SELECT 
            DATE(o.o_datetime) as orderDate,
            COUNT(DISTINCT o.o_id) as orderCount,
            AVG(o.total_price) as avgOrderAmount
        FROM 
            orders o
        WHERE 
            o.o_datetime BETWEEN #{startDate} AND #{endDate}
        GROUP BY 
            DATE(o.o_datetime)
        ORDER BY 
            orderDate
    </select>
</mapper>
