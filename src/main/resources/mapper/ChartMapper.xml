<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shoppingmall.demo.mapper.ChartMapper">

    <resultMap id="ChartMap" type="Chart">
        <result property="orderDate" column="orderDate"/>
        <result property="orderCount" column="orderCount"/>
        <result property="totalSales" column="totalSales"/>
        <result property="productName" column="p_name"/>
        <result property="productPrice" column="p_price"/>
        <result property="categoryPath" column="category_path"/>
        <result property="totalQuantity" column="totalQuantity"/>
        <result property="avgRating" column="avgRating"/>
    </resultMap>

    <!-- 기간별 주문 건수 및 매출 통계 -->
    <select id="getSalesStatsByPeriod" parameterType="map" resultMap="ChartMap">
        SELECT 
            DATE(o.o_datetime) as orderDate,
            COUNT(DISTINCT o.o_id) as orderCount,
            SUM(o.total_price) as totalSales
        FROM 
            orders o
        WHERE 
            (#{startDate} IS NULL OR o.o_datetime &gt;= #{startDate})
            AND (#{endDate} IS NULL OR o.o_datetime &lt;= #{endDate})
        GROUP BY 
            DATE(o.o_datetime)
        ORDER BY 
            orderDate
    </select>

    <!-- 카테고리별 판매 통계 -->
    <select id="getSalesStatsByCategory" parameterType="map" resultType="map">
        WITH RECURSIVE CategoryHierarchy AS (
            -- 초기 선택: 최테고리 계층 구조
            SELECT 
                category_id,
                parent_id
            FROM category
            WHERE 1=1
            <if test="categoryId != null">
                AND (
                    category_id = #{categoryId}
                    OR parent_id = #{categoryId}
                    OR EXISTS (
                        SELECT 1 FROM category c2 
                        WHERE c2.parent_id = #{categoryId}
                        AND category.parent_id = c2.category_id
                    )
                )
            </if>
        )
        SELECT 
            p.p_id,
            p.p_name,
            p.p_price,
            p.category_path,  -- product 테이블의 category_path 사용
            IFNULL(SUM(od.od_count), 0) as totalQuantity,
            IFNULL(SUM(od.od_price), 0) as totalAmount,
            COALESCE(AVG(r.r_score), 0) as avgRating,
            RANK() OVER (ORDER BY IFNULL(SUM(od.od_price), 0) DESC) as rank
        FROM 
            product p
            JOIN category c ON p.category_id = c.category_id
            LEFT JOIN CategoryHierarchy ch ON c.category_id = ch.category_id
            LEFT JOIN order_detail od ON p.p_id = od.p_id
            LEFT JOIN orders o ON od.o_id = o.o_id
            LEFT JOIN review r ON p.p_id = r.p_id
        <where>
            <if test="startDate != null and startDate != ''">
                AND o.o_datetime &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND o.o_datetime &lt;= #{endDate}
            </if>
            <if test="categoryId != null">
                AND ch.category_id IS NOT NULL
            </if>
        </where>
        GROUP BY 
            p.p_id, p.p_name, p.p_price, p.category_path
        ORDER BY 
            totalAmount DESC, p.p_name
    </select>

    <!-- 상품별 판매 순위 -->
    <select id="getTopSellingProducts" parameterType="map" resultType="map">
        SELECT 
            p.p_name,
            SUM(od.od_count) as totalQuantity,
            SUM(od.od_price) as totalAmount
        FROM 
            orders o
            JOIN order_detail od ON o.o_id = od.o_id
            JOIN product p ON od.p_id = p.p_id
        WHERE 
            (#{startDate} IS NULL OR o.o_datetime &gt;= #{startDate})
            AND (#{endDate} IS NULL OR o.o_datetime &lt;= #{endDate})
        GROUP BY 
            p.p_id
        ORDER BY 
            totalAmount DESC
        LIMIT 10
    </select>

    <!-- 일별 평균 주문금액 -->
    <select id="getAverageOrderAmount" parameterType="map" resultType="map">
        SELECT 
            DATE(o.o_datetime) as orderDate,
            COUNT(DISTINCT o.o_id) as orderCount,
            AVG(o.total_price) as avgOrderAmount
        FROM 
            orders o
        WHERE 
            (#{startDate} IS NULL OR o.o_datetime &gt;= #{startDate})
            AND (#{endDate} IS NULL OR o.o_datetime &lt;= #{endDate})
        GROUP BY 
            DATE(o.o_datetime)
        ORDER BY 
            orderDate
    </select>
</mapper>
