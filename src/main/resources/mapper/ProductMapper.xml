<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shoppingmall.demo.mapper.ProductMapper">
	<resultMap id="ProductMap" type="Product">
		<id property="pId" column="p_id"/>
		<result property="pPrice" column="p_price"/>
		<result property="pName" column="p_name"/>
		<result property="pSeller" column="p_seller"/>
		<result property="pStock" column="p_stock"/>
		<result property="pUptime" column="p_uptime"/>
		<result property="pImgpath" column="p_imgpath"/>
		<result property="catePath" column="category_path"/>
		<result property="pDetail" column="p_detail"/>
		
		<association property="category" javaType="Category" resultMap="CategoryMap">
			<id property="cateId" column="category_id"/>
			<result property="cateName" column="category_name"/>
			<result property="parentId" column="parent_id"/>
		</association>
	</resultMap>
	
	<resultMap id="CategoryMap" type="Category">
		<id property="cateId" column="category_id"/>
		<result property="cateName" column="category_name"/>
		<result property="parentId" column="parent_id"/>
	</resultMap>
	
	<!-- 제품 읽어오기 (상품 리스트)-->
	<select id="selectProductList" parameterType="Pagination" resultMap="ProductMap">
		WITH RECURSIVE CategoryTier AS (
			SELECT	category_id, category_name, parent_id, 0 as level,
					<!-- 카테고리 이름을 경로로 바꾸기위한 CAST -->
					CAST(category_name AS CHAR(1000)) as path 
			FROM	category
			WHERE	parent_id IS NULL
			
			UNION ALL
			
			SELECT	c.category_id, c.category_name, c.parent_id, ct.level + 1,
					CONCAT(ct.path, '>', c.category_name)
			FROM	category c
			INNER JOIN
					CategoryTier AS ct ON c.parent_id = ct.category_id
		)
		SELECT	p.p_id, p.p_price, p.p_seller, p.p_stock, p.p_name, p.p_imgpath,
				DATE_FORMAT(p_uptime, '%Y-%m-%d') AS p_uptime,
				c.category_id, c.category_name, c.parent_id,
				COALESCE(ct.path, c.category_name) as category_path
		FROM	product p
		LEFT JOIN category c ON p.category_id = c.category_id
		LEFT JOIN CategoryTier ct ON c.category_id = ct.category_id
		GROUP BY p.p_id, ct.path
		ORDER BY p_id DESC
		LIMIT	#{startIndex}, #{perPage}
	</select>
	
	<!-- 카테고리 경로를 저장할 쿼리 category_path를 최신상태로 업데이트 -->
	<update id="updateProductCategoryPath">
        UPDATE product p
        JOIN (
            WITH RECURSIVE CategoryTier AS (
                SELECT  category_id, category_name, parent_id, 0 as level,
                        CAST(category_name AS CHAR(1000)) as path 
                FROM    category
                WHERE   parent_id IS NULL
                
                UNION ALL
                
                SELECT  c.category_id, c.category_name, c.parent_id, ct.level + 1,
                        CONCAT(ct.path, '>', c.category_name)
                FROM    category c
                INNER JOIN
                        CategoryTier AS ct ON c.parent_id = ct.category_id
            )
            SELECT  p.p_id,
                    COALESCE(ct.path, c.category_name) as category_path
            FROM    product p
            LEFT JOIN category c ON p.category_id = c.category_id
            LEFT JOIN CategoryTier ct ON c.category_id = ct.category_id
        ) AS derived ON p.p_id = derived.p_id
        SET p.category_path = derived.category_path
    </update>
	
	<!-- p_id를 기준으로 제품의 정보 가져오기 (제품수정 시 필요)-->
	<select id="selectProductPid" parameterType="int" resultMap="ProductMap">
		SELECT	p_id, p_price, p_seller, p_stock, p_name, category_id, p_imgpath, p_detail, category_path
		FROM	product
		WHERE	p_id = #{pId}
	</select>

	<!-- 전체 상품 목록 조회 -->
	<select id="getAllProducts" resultMap="ProductMap">
		SELECT  p.p_id, p.p_price, p.p_seller, p.p_stock, p.p_name, p.p_imgpath,
				DATE_FORMAT(p_uptime, '%Y-%m-%d') AS p_uptime,
				c.category_id, c.category_name, c.parent_id
		FROM    product p
		LEFT JOIN category c ON p.category_id = c.category_id
		ORDER BY p_id DESC
	</select>
	
	<!-- 페이지네이션 적용을 위한 카운트 -->
	<select id="countProduct" resultType="int">
		SELECT	COUNT(*)
		FROM	product
	</select>
	
	<!-- 제품 등록 -->
	<insert id="insertProduct" parameterType="Product">
		INSERT INTO	product (
			p_id,
			p_price,
			p_name,
			p_seller,
			p_stock,
			category_id,
			p_imgpath,
			p_detail
		) VALUES (
			#{pId},
			#{pPrice},
			#{pName},
			#{pSeller},
			#{pStock},
			#{cateId},
			#{pImgpath},
			#{pDetail}
		)
	</insert>
	
	<!-- 제품 단일 삭제 -->
	<delete id="deleteProduct" parameterType="int">
		DELETE FROM	product
		WHERE	p_id = #{pId}
	</delete>
	
	<!-- 제품 수정 -->
	<update id="updateProduct" parameterType="Product">
		UPDATE	product
		SET		p_price = #{pPrice},
				p_seller = #{pSeller},
				p_name = #{pName},
				p_stock = #{pStock},
				category_id = #{cateId},
				p_imgpath = #{pImgpath},
				p_detail = #{pDetail}
		WHERE	p_id = #{pId}
	</update>
	
	<!-- 카테고리ID를 기준으로 상품 조회 (하위 카테고리 포함) -->
	<select id="selectProductByCategory" parameterType="Integer" resultMap="ProductMap">
		WITH RECURSIVE CategoryHierarchy AS (
			-- 시작 카테고리
			SELECT category_id, parent_id
			FROM category
			WHERE category_id = #{cateId}
			
			UNION ALL
			
			-- 하위 카테고리 재귀 조회
			SELECT c.category_id, c.parent_id
			FROM category c
			INNER JOIN CategoryHierarchy ch ON c.parent_id = ch.category_id
		)
		SELECT DISTINCT p.p_id, p.p_price, p.p_seller, p.p_stock, p.p_name, 
			   p.category_id, p.p_imgpath, p.p_detail
		FROM product p
		INNER JOIN CategoryHierarchy ch ON p.category_id = ch.category_id
	</select>

	<!-- 상품명을 검색하여 조회 -->
	<select id="searchProducts" parameterType="SearchParam" resultMap="ProductMap">
		SELECT * 
		FROM product
		WHERE 1=1
		<if test="searchKeyword != null and searchKeyword != ''">
			AND (
				p_name LIKE CONCAT('%', #{searchKeyword}, '%')
				OR p_detail LIKE CONCAT('%', #{searchKeyword}, '%')
			)
		</if>
		ORDER BY p_id DESC
	</select>
</mapper>
